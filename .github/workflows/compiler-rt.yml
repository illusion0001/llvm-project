name: compiler-rt

on:
  push:
    branches: [ master ]
    paths:
      - 'compiler-rt/**'
  pull_request:
    branches: [ master ]
  
  workflow_dispatch:

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build
      run: |
        mkdir compiler-rt/build && cd compiler-rt/build
        cmake -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DCMAKE_C_FLAGS="-fPIC -DPS4 -D_LIBUNWIND_IS_BAREMETAL=1" -DCMAKE_CXX_FLAGS="-fPIC -DPS4 -D_LIBUNWIND_IS_BAREMETAL=1" -DLLVM_PATH="../../llvm" -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE="x86_64-scei-ps4" -DCOMPILER_RT_BAREMETAL_BUILD=YES -DCOMPILER_RT_BUILD_BUILTINS=ON -DCOMPILER_RT_BUILD_CRT=OFF -DCOMPILER_RT_BUILD_SANITIZERS=OFF -DCOMPILER_RT_BUILD_XRAY=OFF -DCOMPILER_RT_BUILD_LIBFUZZER=OFF -DCOMPILER_RT_BUILD_PROFILE=OFF .. && make

    - name: Create tarball
      run: |
        mkdir -p release/lib
        cp -r compiler-rt/build/lib/linux/* release/lib/
        cd release
        tar -cvzf compiler-rt.tar.gz lib/*

    - name: Upload compiler-rt
      uses: actions/upload-artifact@v2
      with:
        name: compiler-rt.tar.gz
        path: release/compiler-rt.tar.gz
