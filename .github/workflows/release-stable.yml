name: Create Stable Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  workflow_dispatch:

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Install dependencies
      run: |
        sudo apt-get install -y llvm

    - name: Fetch toolchain headers
      uses: actions/checkout@v2
      with:
        repository: OpenOrbis/OpenOrbis-PS4-Toolchain
        path: oops4
        ref: master

    - name: Build compiler-rt
      run: |
        mkdir compiler-rt/build && cd compiler-rt/build
        cmake -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DCMAKE_C_FLAGS="-fPIC -DPS4 -D_LIBUNWIND_IS_BAREMETAL=1" -DCMAKE_CXX_FLAGS="-fPIC -DPS4 -D_LIBUNWIND_IS_BAREMETAL=1" -DLLVM_PATH="../../llvm" -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE="x86_64-scei-ps4" -DCOMPILER_RT_BAREMETAL_BUILD=YES -DCOMPILER_RT_BUILD_BUILTINS=ON -DCOMPILER_RT_BUILD_CRT=OFF -DCOMPILER_RT_BUILD_SANITIZERS=OFF -DCOMPILER_RT_BUILD_XRAY=OFF -DCOMPILER_RT_BUILD_LIBFUZZER=OFF -DCOMPILER_RT_BUILD_PROFILE=OFF .. && make

    - name: Build libunwind
      run: |
        mkdir libunwind/build && cd libunwind/build
        cmake -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DCMAKE_C_FLAGS="-fPIC -DPS4 -D_LIBUNWIND_IS_BAREMETAL=1" -DCMAKE_CXX_FLAGS="-fPIC -DPS4 -D_LIBUNWIND_IS_BAREMETAL=1" -DLLVM_PATH="../../llvm" -DLIBUNWIND_USE_COMPILER_RT=YES -DLIBUNWIND_BUILD_32_BITS=NO -DLIBUNWIND_ENABLE_STATIC=ON -DLIBUNWIND_USE_COMPILER_RT=YES -DLIBUNWIND_ENABLE_SHARED=OFF .. && make

    - name: Build libcxxabi
      run: |
        mkdir libcxxabi/build && cd libcxxabi/build
        cmake -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DCMAKE_C_FLAGS="-fPIC -DPS4 -D_libcxxabi_IS_BAREMETAL=1 -I../../../oops4/include" -DCMAKE_CXX_FLAGS="-fPIC -DPS4 -D_libcxxabi_IS_BAREMETAL=1 -I../../../oops4/include" -DLLVM_PATH="../../llvm" -DLIBCXXABI_ENABLE_SHARED=NO -DLIBCXXABI_ENABLE_STATIC=YES -DLIBCXXABI_ENABLE_EXCEPTIONS=YES -DLIBCXXABI_USE_COMPILER_RT=YES -DLIBCXXABI_USE_LLVM_UNWINDER=YES -DLIBCXXABI_LIBUNWIND_PATH="../../libunwind" -DLIBCXXABI_LIBCXX_INCLUDES="../../libcxx/include" -DLIBCXXABI_ENABLE_PIC=YES .. && make

    - name: Build libcxx
      run: |
        mkdir libcxx/build && cd libcxx/build
        cmake -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DCMAKE_C_FLAGS="-fPIC -DPS4 -D_libcxx_IS_BAREMETAL=1 -I../../../oops4/include" -DCMAKE_CXX_FLAGS="-fPIC -DPS4 -D_libcxx_IS_BAREMETAL=1 -I../../../oops4/include" -DLLVM_PATH="../../llvm" -DLIBCXX_ENABLE_RTTI=YES -DLIBCXX_HAS_MUSL_LIBC=YES -DLIBCXX_ENABLE_SHARED=NO -DLIBCXX_CXX_ABI=libcxxabi -DLIBCXX_CXX_ABI_INCLUDE_PATHS="../../libcxxabi/include" -DLIBCXX_CXX_ABI_LIBRARY_PATH="../../libcxxabi/build/lib" .. && make

    - name: Copy libs and headers
      continue-on-error: true
      run: |
        mkdir -p release/lib
        mkdir release/include
        cp -r compiler-rt/build/lib/linux/* release/lib/
        cp -r libcxx/build/lib/* release/lib/
        cp -r libcxxabi/build/lib/* release/lib/
        cp -r libunwind/build/lib/* release/lib/
        cp -r libcxx/build/include/* release/include/

    - name: Create master libc++ archive
      run: |
        cd release/lib
        touch mri.txt
        echo "CREATE libc++M.a"   >> mri.txt
        echo "ADDLIB libunwind.a" >> mri.txt
        echo "ADDLIB libc++abi.a" >> mri.txt
        echo "ADDLIB libc++.a"    >> mri.txt
        echo "SAVE"               >> mri.txt
        echo "END"                >> mri.txt
        llvm-ar -M < mri.txt && rm mri.txt && rm libc++.a && mv libc++M.a libc++.a

    - name: Create tarball
      run: |
        tar -cvzf libcxx-full.tar.gz release/*

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Automated build.
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: libcxx-full.tar.gz
        asset_name: libcxx-full.tar.gz
        asset_content_type: application/gzip
