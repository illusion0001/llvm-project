name: libcxxabi

on:
  push:
    branches: [ master ]
    paths:
      - 'libcxxabi/**'
  pull_request:
    branches: [ master ]
  
  workflow_dispatch:

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Fetch toolchain headers
      uses: actions/checkout@v2
      with:
        repository: OpenOrbis/OpenOrbis-PS4-Toolchain
        path: oops4
        ref: master

    - name: Build
      run: |
        cmake -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DCMAKE_C_FLAGS="-fPIC -DPS4 -D_libcxxabi_IS_BAREMETAL=1 -I../../oops4/include" -DCMAKE_CXX_FLAGS="-fPIC -DPS4 -D_libcxxabi_IS_BAREMETAL=1 -I../../oops4/include" -DLLVM_PATH="../../llvm" -DLIBCXXABI_ENABLE_SHARED=NO -DLIBCXXABI_ENABLE_STATIC=YES -DLIBCXXABI_ENABLE_EXCEPTIONS=YES -DLIBCXXABI_USE_COMPILER_RT=YES -DLIBCXXABI_USE_LLVM_UNWINDER=YES -DLIBCXXABI_LIBUNWIND_PATH="../../libunwind" -DLIBCXXABI_LIBCXX_INCLUDES="../../libcxx/include" -DLIBCXXABI_ENABLE_PIC=YES .. && make
    - name: Create tarball
      run: |
        mkdir -p release/lib
        cp -r libcxxabi/build/lib/* release/lib/
        cd release
        tar -cvzf libcxxabi.tar.gz lib/*
    - name: Upload libcxxabi
      uses: actions/upload-artifact@v2
      with:
        name: libcxxabi.tar.gz
        path: release/libcxxabi.tar.gz
